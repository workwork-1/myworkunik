import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from booking_system import BookingSystem
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher(storage=MemoryStorage())
booking = BookingSystem()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class BookingStates(StatesGroup):
    GET_NAME = State()
    GET_PHONE = State()
    CHOOSE_SERVICE = State()
    CHOOSE_MASTER = State()
    CHOOSE_DATE = State()
    CHOOSE_TIME = State()
    CONFIRM = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–º–∏—Ç–µ /book\n"
        "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏: /my_bookings\n"
        "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: /cancel"
    )

# –ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.message(Command("book"))
async def cmd_book(message: types.Message, state: FSMContext):
    await state.set_state(BookingStates.GET_NAME)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@dp.message(BookingStates.GET_NAME)
async def process_name(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == BookingStates.GET_NAME:
        await state.update_data(name=message.text)
        await state.set_state(BookingStates.GET_PHONE)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX):")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(BookingStates.GET_PHONE)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
    cleaned_phone = ''.join(c for c in phone if c.isdigit() or c == '+')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä
    if (cleaned_phone.startswith('+7') and len(cleaned_phone) == 12 or 
        cleaned_phone.startswith('8') and len(cleaned_phone) == 11 or 
        cleaned_phone.startswith('7') and len(cleaned_phone) == 11):
        
        await state.update_data(phone=cleaned_phone)
        await state.set_state(BookingStates.CHOOSE_SERVICE)
        
        services = booking.get_all_services()
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text=f"{s['name']} ({s['duration']} –º–∏–Ω)")] 
                for s in services
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                           "+7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX (11 —Ü–∏—Ñ—Ä)")

# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
@dp.message(BookingStates.CHOOSE_SERVICE)
async def process_service(message: types.Message, state: FSMContext):
    services = booking.get_all_services()
    selected_service = next((s for s in services if s['name'] in message.text), None)
    
    if not selected_service:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    await state.update_data(
        service_id=selected_service['id'],
        service_name=selected_service['name'],
        duration=selected_service['duration']
    )
    await state.set_state(BookingStates.CHOOSE_MASTER)
    
    masters = booking.get_masters_for_service(selected_service['id'])
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=m['name'])] for m in masters],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=keyboard)

# –í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞
@dp.message(BookingStates.CHOOSE_MASTER)
async def process_master(message: types.Message, state: FSMContext):
    masters = booking.get_all_masters()
    selected_master = next((m for m in masters if m['name'] == message.text), None)
    
    if not selected_master:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    
    await state.update_data(
        master_id=selected_master['id'],
        master_name=selected_master['name']
    )
    await state.set_state(BookingStates.CHOOSE_DATE)
    
    today = datetime.now().date()
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=(today + timedelta(days=i)).strftime("%Y-%m-%d"))] 
            for i in range(14) if (today + timedelta(days=i)).weekday() < 5
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)

# –í—ã–±–æ—Ä –¥–∞—Ç—ã
@dp.message(BookingStates.CHOOSE_DATE)
async def process_date(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%Y-%m-%d")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        return
    
    data = await state.get_data()
    slots = booking.get_available_slots(data['master_id'], message.text, data['duration'])
    
    if not slots:
        await message.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:")
        return
    
    await state.update_data(date=message.text)
    await state.set_state(BookingStates.CHOOSE_TIME)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=s['start_time'])] for s in slots],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
@dp.message(BookingStates.CHOOSE_TIME)
async def process_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    data = await state.get_data()
    
    confirm_text = (
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
        f"–£—Å–ª—É–≥–∞: {data['service_name']}\n"
        f"–ú–∞—Å—Ç–µ—Ä: {data['master_name']}\n"
        f"–î–∞—Ç–∞: {data['date']}\n"
        f"–í—Ä–µ–º—è: {data['time']}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )
    
    await state.set_state(BookingStates.CONFIRM)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer(confirm_text, reply_markup=keyboard)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
@dp.message(BookingStates.CONFIRM)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text.lower() != '–¥–∞':
        await message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
    client_id = booking.add_client(
        name=data['name'],
        phone=data['phone'],
        telegram_id=message.from_user.id
    )
    
    if not client_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    success = booking.create_booking(
        client_id=client_id,
        service_id=data['service_id'],
        master_id=data['master_id'],
        date=data['date'],
        start_time=data['time']
    )
    
    if success:
        await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏", reply_markup=types.ReplyKeyboardRemove())
    
    await state.clear()
# –ú–æ–∏ –∑–∞–ø–∏—Å–∏
@dp.message(Command("my_bookings"))
async def cmd_my_bookings(message: types.Message):
    client_id = booking.get_client_id(telegram_id=message.from_user.id)
    if not client_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    
    bookings = booking.get_client_bookings(client_id)
    if not bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    
    response = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n" + "\n\n".join(
        f"üìÖ {b['date']} –≤ {b['start_time']}\n"
        f"üß¥ –£—Å–ª—É–≥–∞: {b['service']}\n"
        f"üíá –ú–∞—Å—Ç–µ—Ä: {b['master']}"
        for b in bookings
    )
    await message.answer(response)

# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message):
    client_id = booking.get_client_id(telegram_id=message.from_user.id)
    if not client_id:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    bookings = booking.get_client_bookings(client_id)
    if not bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text=f"{b['date']} {b['start_time']} - {b['service']}",
            callback_data=f"cancel_{b['id']}"
        )] for b in bookings
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.callback_query(lambda c: c.data.startswith('cancel_'))
async def process_cancel(callback: types.CallbackQuery):
    booking_id = int(callback.data.split('_')[1])
    if booking.cancel_booking(booking_id):
        await callback.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", show_alert=True)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ", show_alert=True)
    
    await callback.message.edit_reply_markup(reply_markup=None)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())